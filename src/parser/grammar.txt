Documentation brought to you by odana

SYNTAX:

   rulename   ::= defintion
   rules       -> lowercase
   token       -> uppercase

# input       ::= pipeline
# pipeline    ::= command ('|' command)?

the question mark means its optional:
a pipeline might contain a pipe 
and another pipeline, or it might not

# command     ::= WORD+ redir* | redir+

here the (*) means there might be zero or more redirs
and the (+) means there must be at least 1 word
example:  ls -l /etc  -> 3 words
          echo hello  -> 2 words
          < file.txt  -> 0 words it's just a redir

when parsing the command we have to make sure to implement left assosiative parsing
this means that when parsing a | b | c, th strcuture needs to be (a | b) | c and not a | (b | c)

# redir       ::= ('<'|'>'|'>>'|'<<') WORD

LEFT ASSOSIATIVE PARSING METHOD:
  -> top down parsing methodology:
  -> each rule has its own function (pase_pipeline, parse_input, ect..)
  -> each function will call the functions defined in it
  -> parsing mimics shell behavior as it parses nodes on the left first, 
      then any trailing commands are left on the right
  -> example:     parse_pipeline 
                      |
                      |-> parse_command -> parse_redir
                      |-> parse_command -> parse_redir
                      |
                      etc..